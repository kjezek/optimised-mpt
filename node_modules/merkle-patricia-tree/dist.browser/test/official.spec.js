"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var src_1 = require("../src");
tape('official tests', function (t) {
    return __awaiter(this, void 0, void 0, function () {
        var jsonTests, testNames, trie, _i, testNames_1, testName, inputs, expect, _a, inputs_1, input, i;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    jsonTests = require('./fixtures/trietest.json').tests;
                    testNames = Object.keys(jsonTests);
                    trie = new src_1.CheckpointTrie();
                    _i = 0, testNames_1 = testNames;
                    _b.label = 1;
                case 1:
                    if (!(_i < testNames_1.length)) return [3 /*break*/, 9];
                    testName = testNames_1[_i];
                    inputs = jsonTests[testName].in;
                    expect = jsonTests[testName].root;
                    _a = 0, inputs_1 = inputs;
                    _b.label = 2;
                case 2:
                    if (!(_a < inputs_1.length)) return [3 /*break*/, 7];
                    input = inputs_1[_a];
                    i = 0;
                    _b.label = 3;
                case 3:
                    if (!(i < 2)) return [3 /*break*/, 6];
                    if (input[i] && input[i].slice(0, 2) === '0x') {
                        input[i] = Buffer.from(input[i].slice(2), 'hex');
                    }
                    else if (input[i] && typeof input[i] === 'string') {
                        input[i] = Buffer.from(input[i]);
                    }
                    return [4 /*yield*/, trie.put(Buffer.from(input[0]), input[1])];
                case 4:
                    _b.sent();
                    _b.label = 5;
                case 5:
                    i++;
                    return [3 /*break*/, 3];
                case 6:
                    _a++;
                    return [3 /*break*/, 2];
                case 7:
                    t.equal('0x' + trie.root.toString('hex'), expect);
                    trie = new src_1.CheckpointTrie();
                    _b.label = 8;
                case 8:
                    _i++;
                    return [3 /*break*/, 1];
                case 9:
                    t.end();
                    return [2 /*return*/];
            }
        });
    });
});
tape('official tests any order', function (t) {
    return __awaiter(this, void 0, void 0, function () {
        var jsonTests, testNames, trie, _i, testNames_2, testName, test, keys, key, _a, keys_1, val;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    jsonTests = require('./fixtures/trieanyorder.json').tests;
                    testNames = Object.keys(jsonTests);
                    trie = new src_1.CheckpointTrie();
                    _i = 0, testNames_2 = testNames;
                    _b.label = 1;
                case 1:
                    if (!(_i < testNames_2.length)) return [3 /*break*/, 7];
                    testName = testNames_2[_i];
                    test = jsonTests[testName];
                    keys = Object.keys(test.in);
                    key = void 0;
                    _a = 0, keys_1 = keys;
                    _b.label = 2;
                case 2:
                    if (!(_a < keys_1.length)) return [3 /*break*/, 5];
                    key = keys_1[_a];
                    val = test.in[key];
                    if (key.slice(0, 2) === '0x') {
                        key = Buffer.from(key.slice(2), 'hex');
                    }
                    if (val && val.slice(0, 2) === '0x') {
                        val = Buffer.from(val.slice(2), 'hex');
                    }
                    return [4 /*yield*/, trie.put(Buffer.from(key), Buffer.from(val))];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    _a++;
                    return [3 /*break*/, 2];
                case 5:
                    t.equal('0x' + trie.root.toString('hex'), test.root);
                    trie = new src_1.CheckpointTrie();
                    _b.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 1];
                case 7:
                    t.end();
                    return [2 /*return*/];
            }
        });
    });
});
