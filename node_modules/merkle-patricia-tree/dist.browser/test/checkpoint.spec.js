"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var src_1 = require("../src");
tape('testing checkpoints', function (tester) {
    var it = tester.test;
    var trie;
    var trieCopy;
    var preRoot;
    var postRoot;
    it('setup', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trie = new src_1.CheckpointTrie();
                        return [4 /*yield*/, trie.put(Buffer.from('do'), Buffer.from('verb'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from('doge'), Buffer.from('coin'))];
                    case 2:
                        _a.sent();
                        preRoot = trie.root.toString('hex');
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should copy trie and get value before checkpoint', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trieCopy = trie.copy();
                        t.equal(trieCopy.root.toString('hex'), preRoot);
                        return [4 /*yield*/, trieCopy.get(Buffer.from('do'))];
                    case 1:
                        res = _a.sent();
                        t.ok(Buffer.from('verb').equals(Buffer.from(res)));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a checkpoint', function (t) {
        trie.checkpoint();
        t.ok(trie.isCheckpoint);
        t.end();
    });
    it('should save to the cache', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from('test'), Buffer.from('something'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from('love'), Buffer.from('emotion'))];
                    case 2:
                        _a.sent();
                        postRoot = trie.root.toString('hex');
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get values from before checkpoint', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('doge'))];
                    case 1:
                        res = _a.sent();
                        t.ok(Buffer.from('coin').equals(Buffer.from(res)));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get values from cache', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('love'))];
                    case 1:
                        res = _a.sent();
                        t.ok(Buffer.from('emotion').equals(Buffer.from(res)));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should copy trie and get upstream and cache values after checkpoint', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var res, res2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trieCopy = trie.copy();
                        t.equal(trieCopy.root.toString('hex'), postRoot);
                        t.equal(trieCopy._checkpoints.length, 1);
                        t.ok(trieCopy.isCheckpoint);
                        return [4 /*yield*/, trieCopy.get(Buffer.from('do'))];
                    case 1:
                        res = _a.sent();
                        t.ok(Buffer.from('verb').equals(Buffer.from(res)));
                        return [4 /*yield*/, trieCopy.get(Buffer.from('love'))];
                    case 2:
                        res2 = _a.sent();
                        t.ok(Buffer.from('emotion').equals(Buffer.from(res2)));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should revert to the orginal root', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t.ok(trie.isCheckpoint);
                        return [4 /*yield*/, trie.revert()];
                    case 1:
                        _a.sent();
                        t.equal(trie.root.toString('hex'), preRoot);
                        t.notOk(trie.isCheckpoint);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should not get values from cache after revert', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('love'))];
                    case 1:
                        res = _a.sent();
                        t.notOk(res);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should commit a checkpoint', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trie.checkpoint();
                        return [4 /*yield*/, trie.put(Buffer.from('test'), Buffer.from('something'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from('love'), Buffer.from('emotion'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie.commit()];
                    case 3:
                        _a.sent();
                        t.equal(trie.isCheckpoint, false);
                        t.equal(trie.root.toString('hex'), postRoot);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get new values after commit', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('love'))];
                    case 1:
                        res = _a.sent();
                        t.ok(Buffer.from('emotion').equals(Buffer.from(res)));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should commit a nested checkpoint', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var root;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trie.checkpoint();
                        return [4 /*yield*/, trie.put(Buffer.from('test'), Buffer.from('something else'))];
                    case 1:
                        _a.sent();
                        root = trie.root;
                        trie.checkpoint();
                        return [4 /*yield*/, trie.put(Buffer.from('the feels'), Buffer.from('emotion'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie.revert()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, trie.commit()];
                    case 4:
                        _a.sent();
                        t.equal(trie.isCheckpoint, false);
                        t.equal(trie.root.toString('hex'), root.toString('hex'));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
});
