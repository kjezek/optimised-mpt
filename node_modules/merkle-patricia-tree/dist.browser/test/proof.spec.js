"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var src_1 = require("../src");
tape('simple merkle proofs generation and verification', function (tester) {
    var _this = this;
    var it = tester.test;
    it('create a merkle proof and verify it', function (t) { return __awaiter(_this, void 0, void 0, function () {
        var trie, proof, val, myKey, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    trie = new src_1.CheckpointTrie();
                    return [4 /*yield*/, trie.put(Buffer.from('key1aa'), Buffer.from('0123456789012345678901234567890123456789xx'))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key2bb'), Buffer.from('aval2'))];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key3cc'), Buffer.from('aval3'))];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key2bb'))];
                case 4:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key2bb'), proof)];
                case 5:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), 'aval2');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key1aa'))];
                case 6:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key1aa'), proof)];
                case 7:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), '0123456789012345678901234567890123456789xx');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key2bb'))];
                case 8:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key2'), proof)
                        // In this case, the proof _happens_ to contain enough nodes to prove `key2` because
                        // traversing into `key22` would touch all the same nodes as traversing into `key2`
                    ];
                case 9:
                    val = _a.sent();
                    // In this case, the proof _happens_ to contain enough nodes to prove `key2` because
                    // traversing into `key22` would touch all the same nodes as traversing into `key2`
                    t.equal(val, null, 'Expected value at a random key to be null');
                    myKey = Buffer.from('anyrandomkey');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, myKey)];
                case 10:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, myKey, proof)];
                case 11:
                    val = _a.sent();
                    t.equal(val, null, 'Expected value to be null');
                    myKey = Buffer.from('anothergarbagekey'); // should generate a valid proof of null
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, myKey)];
                case 12:
                    proof = _a.sent();
                    proof.push(Buffer.from('123456')); // extra nodes are just ignored
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, myKey, proof)];
                case 13:
                    val = _a.sent();
                    t.equal(val, null, 'Expected value to be null');
                    return [4 /*yield*/, trie.put(Buffer.from('another'), Buffer.from('3498h4riuhgwe'))
                        // to fail our proof we can request a proof for one key
                    ];
                case 14:
                    _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('another'))
                        // and use that proof on another key
                    ];
                case 15:
                    // to fail our proof we can request a proof for one key
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key1aa'), proof)];
                case 16:
                    result = _a.sent();
                    t.equal(result, null);
                    t.end();
                    return [2 /*return*/];
            }
        });
    }); });
    it('create a merkle proof and verify it with a single long key', function (t) { return __awaiter(_this, void 0, void 0, function () {
        var trie, proof, val;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    trie = new src_1.CheckpointTrie();
                    return [4 /*yield*/, trie.put(Buffer.from('key1aa'), Buffer.from('0123456789012345678901234567890123456789xx'))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key1aa'))];
                case 2:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key1aa'), proof)];
                case 3:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), '0123456789012345678901234567890123456789xx');
                    t.end();
                    return [2 /*return*/];
            }
        });
    }); });
    it('create a merkle proof and verify it with a single short key', function (t) { return __awaiter(_this, void 0, void 0, function () {
        var trie, proof, val;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    trie = new src_1.CheckpointTrie();
                    return [4 /*yield*/, trie.put(Buffer.from('key1aa'), Buffer.from('01234'))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key1aa'))];
                case 2:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key1aa'), proof)];
                case 3:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), '01234');
                    t.end();
                    return [2 /*return*/];
            }
        });
    }); });
    it('create a merkle proof and verify it whit keys in the middle', function (t) { return __awaiter(_this, void 0, void 0, function () {
        var trie, proof, val;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    trie = new src_1.CheckpointTrie();
                    return [4 /*yield*/, trie.put(Buffer.from('key1aa'), Buffer.from('0123456789012345678901234567890123456789xxx'))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key1'), Buffer.from('0123456789012345678901234567890123456789Very_Long'))];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key2bb'), Buffer.from('aval3'))];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key2'), Buffer.from('short'))];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key3cc'), Buffer.from('aval3'))];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('key3'), Buffer.from('1234567890123456789012345678901'))];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key1'))];
                case 7:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key1'), proof)];
                case 8:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), '0123456789012345678901234567890123456789Very_Long');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key2'))];
                case 9:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key2'), proof)];
                case 10:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), 'short');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('key3'))];
                case 11:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('key3'), proof)];
                case 12:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), '1234567890123456789012345678901');
                    t.end();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should succeed with a simple embedded extension-branch', function (t) { return __awaiter(_this, void 0, void 0, function () {
        var trie, proof, val;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    trie = new src_1.CheckpointTrie();
                    return [4 /*yield*/, trie.put(Buffer.from('a'), Buffer.from('a'))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('b'), Buffer.from('b'))];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, trie.put(Buffer.from('c'), Buffer.from('c'))];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('a'))];
                case 4:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('a'), proof)];
                case 5:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), 'a');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('b'))];
                case 6:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('b'), proof)];
                case 7:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), 'b');
                    return [4 /*yield*/, src_1.CheckpointTrie.prove(trie, Buffer.from('c'))];
                case 8:
                    proof = _a.sent();
                    return [4 /*yield*/, src_1.CheckpointTrie.verifyProof(trie.root, Buffer.from('c'), proof)];
                case 9:
                    val = _a.sent();
                    t.equal(val.toString('utf8'), 'c');
                    t.end();
                    return [2 /*return*/];
            }
        });
    }); });
});
