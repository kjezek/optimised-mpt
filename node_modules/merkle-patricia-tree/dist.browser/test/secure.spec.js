"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var src_1 = require("../src");
tape('SecureTrie', function (t) {
    var trie = new src_1.SecureTrie();
    var k = Buffer.from('foo');
    var v = Buffer.from('bar');
    t.test('put and get value', function (st) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(k, v)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.get(k)];
                    case 2:
                        res = _a.sent();
                        st.ok(v.equals(res));
                        st.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    t.test('copy trie', function (st) {
        return __awaiter(this, void 0, void 0, function () {
            var t, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t = trie.copy();
                        return [4 /*yield*/, t.get(k)];
                    case 1:
                        res = _a.sent();
                        st.ok(v.equals(res));
                        st.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    tape('SecureTrie proof', function (t) {
        t.test('create a merkle proof and verify it with a single short key', function (st) {
            return __awaiter(this, void 0, void 0, function () {
                var trie, proof, val;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            trie = new src_1.SecureTrie();
                            return [4 /*yield*/, trie.put(Buffer.from('key1aa'), Buffer.from('01234'))];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, src_1.SecureTrie.prove(trie, Buffer.from('key1aa'))];
                        case 2:
                            proof = _a.sent();
                            return [4 /*yield*/, src_1.SecureTrie.verifyProof(trie.root, Buffer.from('key1aa'), proof)];
                        case 3:
                            val = _a.sent();
                            st.equal(val.toString('utf8'), '01234');
                            st.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    tape('secure tests', function (it) {
        var trie = new src_1.SecureTrie();
        var jsonTests = require('./fixtures/trietest_secureTrie.json').tests;
        it.test('empty values', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, row, val;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _i = 0, _a = jsonTests.emptyValues.in;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            row = _a[_i];
                            val = row[1] ? Buffer.from(row[1]) : null;
                            return [4 /*yield*/, trie.put(Buffer.from(row[0]), val)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            t.equal('0x' + trie.root.toString('hex'), jsonTests.emptyValues.root);
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it.test('branchingTests', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, row, val;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            trie = new src_1.SecureTrie();
                            _i = 0, _a = jsonTests.branchingTests.in;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            row = _a[_i];
                            val = row[1] ? Buffer.from(row[1]) : null;
                            return [4 /*yield*/, trie.put(Buffer.from(row[0]), val)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            t.equal('0x' + trie.root.toString('hex'), jsonTests.branchingTests.root);
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it.test('jeff', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, row, val;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _i = 0, _a = jsonTests.jeff.in;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            row = _a[_i];
                            val = row[1];
                            if (val) {
                                val = Buffer.from(row[1].slice(2), 'hex');
                            }
                            return [4 /*yield*/, trie.put(Buffer.from(row[0].slice(2), 'hex'), val)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            t.equal('0x' + trie.root.toString('hex'), jsonTests.jeff.root.toString('hex'));
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
var trie = new src_1.SecureTrie();
var a = Buffer.from('f8448080a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0a155280bc3c09fd31b0adebbdd4ef3d5128172c0d2008be964dc9e10e0f0fedf', 'hex');
var ak = Buffer.from('095e7baea6a6c7c4c2dfeb977efac326af552d87', 'hex');
var b = Buffer.from('f844802ea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0db94dc4aab9b6a1a11956906ea34f3252f394576aece12199b23b269bb2738ab', 'hex');
var bk = Buffer.from('945304eb96065b2a98b57a48a06ae28d285a71b5', 'hex');
var c = Buffer.from('f84c80880de0b6b3a7640000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 'hex');
var ck = Buffer.from('a94f5374fce5edbc8e2a8697c15331677e6ebf0b', 'hex');
// checkpoint
// checkpoint
// commit
var d = Buffer.from('f8488084535500b1a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0a155280bc3c09fd31b0adebbdd4ef3d5128172c0d2008be964dc9e10e0f0fedf', 'hex');
var dk = Buffer.from('095e7baea6a6c7c4c2dfeb977efac326af552d87', 'hex');
var e = Buffer.from('f8478083010851a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0db94dc4aab9b6a1a11956906ea34f3252f394576aece12199b23b269bb2738ab', 'hex');
var ek = Buffer.from('945304eb96065b2a98b57a48a06ae28d285a71b5', 'hex');
var f = Buffer.from('f84c01880de0b6b3540df72ca056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 'hex');
var fk = Buffer.from('a94f5374fce5edbc8e2a8697c15331677e6ebf0b', 'hex');
// commit
var g = Buffer.from('f8488084535500b1a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0a155280bc3c09fd31b0adebbdd4ef3d5128172c0d2008be964dc9e10e0f0fedf', 'hex');
var gk = Buffer.from('095e7baea6a6c7c4c2dfeb977efac326af552d87', 'hex');
tape('secure tests should not crash', function (t) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, trie.put(ak, a)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, trie.put(bk, b)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, trie.put(ck, c)];
                case 3:
                    _a.sent();
                    trie.checkpoint();
                    trie.checkpoint();
                    return [4 /*yield*/, trie.commit()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, trie.put(dk, d)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, trie.put(ek, e)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, trie.put(fk, f)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, trie.commit()];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, trie.put(gk, g)];
                case 9:
                    _a.sent();
                    t.end();
                    return [2 /*return*/];
            }
        });
    });
});
