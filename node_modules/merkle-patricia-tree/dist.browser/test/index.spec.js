"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var rlp = require("rlp");
var ethereumjs_util_1 = require("ethereumjs-util");
var src_1 = require("../src");
tape('simple save and retrieve', function (tester) {
    var it = tester.test;
    it('should not crash if given a non-existent root', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var root, trie, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = Buffer.from('3f4399b08efe68945c1cf90ffe85bbe3ce978959da753f9e649f034015b8817d', 'hex');
                        trie = new src_1.CheckpointTrie(null, root);
                        return [4 /*yield*/, trie.get(Buffer.from('test'))];
                    case 1:
                        value = _a.sent();
                        t.equal(value, null);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    var trie = new src_1.CheckpointTrie();
    it('save a value', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from('test'), Buffer.from('one'))];
                    case 1:
                        _a.sent();
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get a value', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('test'))];
                    case 1:
                        value = _a.sent();
                        t.equal(value.toString(), 'one');
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should update a value', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from('test'), Buffer.from('two'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from('test'))];
                    case 2:
                        value = _a.sent();
                        t.equal(value.toString(), 'two');
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should delete a value', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.del(Buffer.from('test'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from('test'))];
                    case 2:
                        value = _a.sent();
                        t.notok(value);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should recreate a value', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from('test'), Buffer.from('one'))];
                    case 1:
                        _a.sent();
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get updated a value', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('test'))];
                    case 1:
                        value = _a.sent();
                        t.equal(value.toString(), 'one');
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a branch here', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from('doge'), Buffer.from('coin'))];
                    case 1:
                        _a.sent();
                        t.equal('de8a34a8c1d558682eae1528b47523a483dd8685d6db14b291451a66066bf0fc', trie.root.toString('hex'));
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get a value that is in a branch', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.get(Buffer.from('doge'))];
                    case 1:
                        value = _a.sent();
                        t.equal(value.toString(), 'coin');
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should delete from a branch', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.del(Buffer.from('doge'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from('doge'))];
                    case 2:
                        value = _a.sent();
                        t.equal(value, null);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    tape('storing longer values', function (tester) {
        return __awaiter(this, void 0, void 0, function () {
            var it, trie, longString, longStringRoot;
            return __generator(this, function (_a) {
                it = tester.test;
                trie = new src_1.CheckpointTrie();
                longString = 'this will be a really really really long value';
                longStringRoot = 'b173e2db29e79c78963cff5196f8a983fbe0171388972106b114ef7f5c24dfa3';
                it('should store a longer string', function (t) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, trie.put(Buffer.from('done'), Buffer.from(longString))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, trie.put(Buffer.from('doge'), Buffer.from('coin'))];
                                case 2:
                                    _a.sent();
                                    t.equal(longStringRoot, trie.root.toString('hex'));
                                    t.end();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should retrieve a longer value', function (t) {
                    return __awaiter(this, void 0, void 0, function () {
                        var value;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, trie.get(Buffer.from('done'))];
                                case 1:
                                    value = _a.sent();
                                    t.equal(value.toString(), longString);
                                    t.end();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should when being modified delete the old value', function (t) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, trie.put(Buffer.from('done'), Buffer.from('test'))];
                                case 1:
                                    _a.sent();
                                    t.end();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                return [2 /*return*/];
            });
        });
    });
    tape('testing extensions and branches', function (tester) {
        var it = tester.test;
        var trie = new src_1.CheckpointTrie();
        it('should store a value', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, trie.put(Buffer.from('doge'), Buffer.from('coin'))];
                        case 1:
                            _a.sent();
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should create extension to store this value', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, trie.put(Buffer.from('do'), Buffer.from('verb'))];
                        case 1:
                            _a.sent();
                            t.equal('f803dfcb7e8f1afd45e88eedb4699a7138d6c07b71243d9ae9bff720c99925f9', trie.root.toString('hex'));
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should store this value under the extension', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, trie.put(Buffer.from('done'), Buffer.from('finished'))];
                        case 1:
                            _a.sent();
                            t.equal('409cff4d820b394ed3fb1cd4497bdd19ffa68d30ae34157337a7043c94a3e8cb', trie.root.toString('hex'));
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    tape('testing extensions and branches - reverse', function (tester) {
        var it = tester.test;
        var trie = new src_1.CheckpointTrie();
        it('should create extension to store this value', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, trie.put(Buffer.from('do'), Buffer.from('verb'))];
                        case 1:
                            _a.sent();
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should store a value', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, trie.put(Buffer.from('doge'), Buffer.from('coin'))];
                        case 1:
                            _a.sent();
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should store this value under the extension', function (t) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, trie.put(Buffer.from('done'), Buffer.from('finished'))];
                        case 1:
                            _a.sent();
                            t.equal('409cff4d820b394ed3fb1cd4497bdd19ffa68d30ae34157337a7043c94a3e8cb', trie.root.toString('hex'));
                            t.end();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
tape('testing deletion cases', function (tester) {
    var it = tester.test;
    var trie = new src_1.CheckpointTrie();
    it('should delete from a branch->branch-branch', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var val;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from([11, 11, 11]), Buffer.from('first'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 22, 22]), Buffer.from('create the first branch'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 34, 44]), Buffer.from('create the last branch'))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, trie.del(Buffer.from([12, 22, 22]))];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from([12, 22, 22]))];
                    case 5:
                        val = _a.sent();
                        t.equal(null, val);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should delete from a branch->branch-extension', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var val;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from([11, 11, 11]), Buffer.from('first'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 22, 22]), Buffer.from('create the first branch'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 33, 33]), Buffer.from('create the middle branch'))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 34, 44]), Buffer.from('create the last branch'))];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, trie.del(Buffer.from([12, 22, 22]))];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from([12, 22, 22]))];
                    case 6:
                        val = _a.sent();
                        t.equal(null, val);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should delete from a extension->branch-extension', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var val;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from([11, 11, 11]), Buffer.from('first'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 22, 22]), Buffer.from('create the first branch'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 33, 33]), Buffer.from('create the middle branch'))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 34, 44]), Buffer.from('create the last branch'))
                            // delete the middle branch
                        ];
                    case 4:
                        _a.sent();
                        // delete the middle branch
                        return [4 /*yield*/, trie.del(Buffer.from([11, 11, 11]))];
                    case 5:
                        // delete the middle branch
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from([11, 11, 11]))];
                    case 6:
                        val = _a.sent();
                        t.equal(null, val);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should delete from a extension->branch-branch', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var val;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.put(Buffer.from([11, 11, 11]), Buffer.from('first'))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 22, 22]), Buffer.from('create the first branch'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 33, 33]), Buffer.from('create the middle branch'))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, trie.put(Buffer.from([12, 34, 44]), Buffer.from('create the last branch'))
                            // delete the middle branch
                        ];
                    case 4:
                        _a.sent();
                        // delete the middle branch
                        return [4 /*yield*/, trie.del(Buffer.from([11, 11, 11]))];
                    case 5:
                        // delete the middle branch
                        _a.sent();
                        return [4 /*yield*/, trie.get(Buffer.from([11, 11, 11]))];
                    case 6:
                        val = _a.sent();
                        t.equal(null, val);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
});
tape('it should create the genesis state root from ethereum', function (tester) {
    var it = tester.test;
    var trie4 = new src_1.CheckpointTrie();
    var g = Buffer.from('8a40bfaa73256b60764c1bf40675a99083efb075', 'hex');
    var j = Buffer.from('e6716f9544a56c530d868e4bfbacb172315bdead', 'hex');
    var v = Buffer.from('1e12515ce3e0f817a4ddef9ca55788a1d66bd2df', 'hex');
    var a = Buffer.from('1a26338f0d905e295fccb71fa9ea849ffa12aaf4', 'hex');
    var stateRoot = Buffer.alloc(32);
    stateRoot.fill(0);
    var startAmount = Buffer.alloc(26);
    startAmount.fill(0);
    startAmount[0] = 1;
    var account = [startAmount, 0, stateRoot, ethereumjs_util_1.KECCAK256_NULL];
    var rlpAccount = rlp.encode(account);
    var cppRlp = 'f85e9a010000000000000000000000000000000000000000000000000080a00000000000000000000000000000000000000000000000000000000000000000a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    var genesisStateRoot = '2f4399b08efe68945c1cf90ffe85bbe3ce978959da753f9e649f034015b8817d';
    tester.equal(cppRlp, rlpAccount.toString('hex'));
    it('shall match the root', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie4.put(g, rlpAccount)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, trie4.put(j, rlpAccount)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, trie4.put(v, rlpAccount)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, trie4.put(a, rlpAccount)];
                    case 4:
                        _a.sent();
                        t.equal(trie4.root.toString('hex'), genesisStateRoot);
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
});
