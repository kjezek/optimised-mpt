"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var src_1 = require("../src");
tape('kv stream test', function (tester) {
    var it = tester.test;
    var trie = new src_1.CheckpointTrie();
    var ops = [
        {
            type: 'del',
            key: Buffer.from('father'),
        },
        {
            type: 'put',
            key: Buffer.from('name'),
            value: Buffer.from('Yuri Irsenovich Kim'),
        },
        {
            type: 'put',
            key: Buffer.from('dob'),
            value: Buffer.from('16 February 1941'),
        },
        {
            type: 'put',
            key: Buffer.from('spouse'),
            value: Buffer.from('Kim Young-sook'),
        },
        {
            type: 'put',
            key: Buffer.from('occupation'),
            value: Buffer.from('Clown'),
        },
        {
            type: 'put',
            key: Buffer.from('nameads'),
            value: Buffer.from('Yuri Irsenovich Kim'),
        },
        {
            type: 'put',
            key: Buffer.from('namfde'),
            value: Buffer.from('Yuri Irsenovich Kim'),
        },
        {
            type: 'put',
            key: Buffer.from('namsse'),
            value: Buffer.from('Yuri Irsenovich Kim'),
        },
        {
            type: 'put',
            key: Buffer.from('dofab'),
            value: Buffer.from('16 February 1941'),
        },
        {
            type: 'put',
            key: Buffer.from('spoudse'),
            value: Buffer.from('Kim Young-sook'),
        },
        {
            type: 'put',
            key: Buffer.from('occupdsation'),
            value: Buffer.from('Clown'),
        },
        {
            type: 'put',
            key: Buffer.from('dozzzb'),
            value: Buffer.from('16 February 1941'),
        },
        {
            type: 'put',
            key: Buffer.from('spouszze'),
            value: Buffer.from('Kim Young-sook'),
        },
        {
            type: 'put',
            key: Buffer.from('occupatdfion'),
            value: Buffer.from('Clown'),
        },
        {
            type: 'put',
            key: Buffer.from('dssob'),
            value: Buffer.from('16 February 1941'),
        },
        {
            type: 'put',
            key: Buffer.from('spossuse'),
            value: Buffer.from('Kim Young-sook'),
        },
        {
            type: 'put',
            key: Buffer.from('occupssation'),
            value: Buffer.from('Clown'),
        },
    ];
    var valObj = {};
    for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {
        var op = ops_1[_i];
        if (op.type === 'put') {
            valObj[op.key.toString()] = op.value.toString();
        }
    }
    it('should populate trie', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, trie.batch(ops)];
                    case 1:
                        _a.sent();
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should fetch all of the nodes', function (t) {
        var stream = trie.createReadStream();
        stream.on('data', function (d) {
            var key = d.key.toString();
            var value = d.value.toString();
            t.equal(valObj[key], value);
            delete valObj[key];
        });
        stream.on('end', function () {
            var keys = Object.keys(valObj);
            t.equal(keys.length, 0);
            t.end();
        });
    });
});
tape('db stream test', function (tester) {
    var it = tester.test;
    var trie = new src_1.CheckpointTrie();
    var ops = [
        {
            type: 'put',
            key: Buffer.from('color'),
            value: Buffer.from('purple'),
        },
        {
            type: 'put',
            key: Buffer.from('food'),
            value: Buffer.from('sushi'),
        },
        {
            type: 'put',
            key: Buffer.from('fight'),
            value: Buffer.from('fire'),
        },
        {
            type: 'put',
            key: Buffer.from('colo'),
            value: Buffer.from('trolo'),
        },
        {
            type: 'put',
            key: Buffer.from('color'),
            value: Buffer.from('blue'),
        },
        {
            type: 'put',
            key: Buffer.from('color'),
            value: Buffer.from('pink'),
        },
    ];
    var expectedNodes = {
        '3c38d9aa6ad288c8e27da701e17fe99a5b67c8b12fd0469651c80494d36bc4c1': true,
        d5f61e1ff2b918d1c2a2c4b1732a3c68bd7e3fd64f35019f2f084896d4546298: true,
        e64329dadee2fb8a113b4c88cfe973aeaa9b523d4dc8510b84ca23f9d5bfbd90: true,
        c916d458bfb5f27603c5bd93b00f022266712514a59cde749f19220daffc743f: true,
        '2386bfb0de9cf93902a110f5ab07b917ffc0b9ea599cb7f4f8bb6fd1123c866c': true,
    };
    it('should populate trie', function (t) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trie.checkpoint();
                        return [4 /*yield*/, trie.batch(ops)];
                    case 1:
                        _a.sent();
                        t.end();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should only fetch nodes in the current trie', function (t) {
        var stream = trie._createScratchReadStream();
        stream.on('data', function (d) {
            var key = d.key.toString('hex');
            t.ok(!!expectedNodes[key]);
            delete expectedNodes[key];
        });
        stream.on('end', function () {
            var keys = Object.keys(expectedNodes);
            t.equal(keys.length, 0);
            t.end();
        });
    });
});
